/**
 * @name MTools
 * @author mr_hares
 * @authorId 1162007580592320532
 * @version 2.4.2
 * @description –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ—Å—è –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
 * @website https://github.com/
 * @source https://github.com/
 */

module.exports = (() => {
    const config = {
        info: {
            name: "MTools",
            authors: [{ name: "mr_hares" }],
            version: "2.4.1",
            description: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ—Å—è –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ | BETA"
        },
        changelog: [
            {
                title: "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                type: "fixed",
                items: ["–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫"]
            }
        ]
    };


    return !global.ZeresPluginLibrary ? class {
        constructor() { this._config = config; }
        getName() { return config.info.name; }
        getAuthor() { return config.info.authors.map(a => a.name).join(", "); }
        getVersion() { return config.info.version; }

        load() {
            BdApi.UI.showConfirmationModal("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                `–î–ª—è —Ä–∞–±–æ—Ç—ã ${config.info.name} —Ç—Ä–µ–±—É–µ—Ç—Å—è ZeresPluginLibrary. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?`, {
                    confirmText: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                    cancelText: "–û—Ç–º–µ–Ω–∞",
                    onConfirm: () => {
                        require("request").get("https://rauenzi.github.io/BDPluginLibrary/release/0PluginLibrary.plugin.js",
                            (error, response, body) => {
                                if (error) return BdApi.UI.showToast("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", {type: "error"});
                                require("fs").writeFile(require("path").join(BdApi.Plugins.folder, "0PluginLibrary.plugin.js"),
                                    body, () => BdApi.UI.showToast("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Discord", {type: "success"}));
                            });
                    }
                });
        }
        start() { this.load(); }
        stop() {}
    } : (([Plugin, Api]) => {
        const { DiscordModules, WebpackModules, Patcher } = Api;
        const fs = require("fs");
        const path = require("path");
        const { React } = BdApi;

        return class MTools extends Plugin {
            constructor() {
                super();
                this.contextMenuPatch = null;
                this.MessageActions = null;
                this.ChannelStore = null;
                this.settings = this.loadSettings();
                BdApi.UI.showToast(this.settings, {type: "error"});
                this.options = {
                    "info_for_user": {
                        name: "[3]. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                        options: [{name: "–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π", command: "*alist"}, {name: "–ò–∫–æ–Ω–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è", command: "!–∞–≤–∞—Ç–∞—Ä"}],
                        type: "info"
                    }
                };
            }

            createGroup(title, options) {
                const group_main = document.createElement('div')
                group_main.style.width = "100%"

                const group_header = document.createElement('div')
                group_header.style.cssText = `
                    width: 96%;
                    background-color: oklab(0.219499 0.00211129 -0.00744916);
                    padding: 10px;
                    cursor: pointer;
                    user-select: none;
                    border: 1px solid #8b8b8bff;
                    border-top-left-radius: 5px;
                    border-top-right-radius: 5px;
                    color: white;
                    font-weight: bold;
                    margin-top: 5px;
                `
                group_header.innerHTML = `<div style="display: flex; justify-content: space-between;">üìå<span>${title}</span>üìå</div>`

                const group_content = document.createElement('div')
                group_content.style.cssText = `
                    width: 96%;
                    height: 100%;
                    background-color: oklab(30.275000000000002% 0.00196 -0.00689);;
                    padding: 10px;
                    user-select: none;
                    border: 1px solid #8b8b8bff;
                    border-bottom-left-radius: 5px;
                    border-bottom-right-radius: 5px;
                    overflow: hidden;
                `

                Object.keys(options).forEach(e => {
                    group_content.appendChild(this.createInput(options[e].title, options[e].description, options[e].value))
                })

                group_main.appendChild(group_header)
                group_main.appendChild(group_content)

                return group_main;
            }

            createInput(title, description, value) {
                const input_container = document.createElement('div')
                input_container.style.flexDirection = "column"
                input_container.style.marginTop = "5px"

                const input_label = document.createElement('div')
                input_label.innerText = title
                input_label.style.color = "white"
                input_label.style.fontWeight = "bold"

                const input_sublabel = document.createElement('div')
                input_sublabel.innerText = description
                input_sublabel.style.cssText = `
                    color: #a7a7a7ff;
                    font-size: 15px;
                    font-weight: bold;
                    margin-bottom: 5px;
                `

                const input = document.createElement('input')
                input.type = "text"
                input.id = "input_1"
                input.value = value
                input.style.cssText = `
                    width: 95%;
                    height: 30px;
                    border-radius: 5px;
                    border: 1px solid #8b8b8bff;
                    padding: 0 10px;
                    background-color: oklab(0.219499 0.00211129 -0.00744916);
                    color: white;
                    font-weight: bold;
                `

                input_container.appendChild(input_label)
                input_container.appendChild(input_sublabel)
                input_container.appendChild(input)

                return input_container
            }

            getSettingsPanel() {
                const panel = document.createElement('div')

                const channels_ids_group = this.createGroup("ID –ö–∞–Ω–∞–ª–æ–≤", {
                    punish_channel: {
                        title: "–í—ã–¥–∞—á–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è (ID –ö–∞–Ω–∞–ª–∞)",
                        description: "# –ö–∞–Ω–∞–ª –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                        value: this.settings.channel_ids.punish_channel
                    },
                    info_channel: {
                        title: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (ID –ö–∞–Ω–∞–ª–∞)",
                        description: "# –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ !–∞–≤–∞—Ç–∞—Ä",
                        value: this.settings.channel_ids.info_channel
                    },
                    alist_channel: {
                        title: "–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π (ID –ö–∞–Ω–∞–ª–∞)",
                        description: "# –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ /alist",
                        value: this.settings.channel_ids.alist_channel
                    },
                })

                const command_format_group = this.createGroup("–§–æ—Ä–º–∞—Ç—ã –∫–æ–º–∞–Ω–¥", {
                    warn: {
                        title: "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /warn",
                        description: "# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {userId} {reason}",
                        value: this.settings.command_format.warn
                    },
                    mute: {
                        title: "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /mute",
                        description: "# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {userId} {time} {reason}",
                        value: this.settings.command_format.mute
                    },
                    vmute: {
                        title: "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /vmute",
                        description: "# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {userId} {time} {reason}",
                        value: this.settings.command_format.vmute
                    },
                    ban: {
                        title: "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /ban",
                        description: "# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {userId} {time} {reason}",
                        value: this.settings.command_format.ban
                    }
                })

                panel.appendChild(command_format_group)
                panel.appendChild(channels_ids_group)

                return panel;
            }

            loadSettings() {
                const defaultSettings = {
                    channel_ids: {
                        punish_channel: '0',
                        info_channel: '0',
                        alist_channel: '0'
                    },
                    command_format: {
                        warn: '/warn {userId} {reason}',
                        mute: '/mute {userId} {time} {reason}',
                        vmute: '/vmute {userId} {time} {reason}',
                        ban: '/ban {userId} {time} {reason}'
                    }
                };
                return defaultSettings;
            }

            saveSettings(newSettings) {
                BdApi.saveData(this.getName(), 'settings', newSettings);
            }

            MySearchInput(props) {
                const React = BdApi.React;
                return React.createElement("input", {
                    type: "text",
                    placeholder: props.placeholder || "Search...",
                    onChange: props?.onChange,
                    id: props.id
                });
            }


            PunishmentForm() {
                return React.createElement('div', { 
                    className: 'punishment-container',
                    style: {
                        padding: '10px',
                        backgroundColor: '#2f3136',
                        borderRadius: '5px',
                        margin: '10px 0'
                    }
                },
                    React.createElement('div', { style: { marginBottom: '15px' } },
                        React.createElement('label', { 
                            style: {
                                display: 'block',
                                color: '#b9bbbe',
                                fontSize: '14px',
                                fontWeight: 'bold',
                                marginBottom: '5px'
                            }
                        }, '–í—Ä–µ–º—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è'),
                        React.createElement('input', {
                            type: 'text',
                            id: "time-punishment",
                            placeholder: '–ù–∞–ø—Ä–∏–º–µ—Ä: 7 –¥–Ω–µ–π',
                            style: {
                                width: '90%',
                                padding: '8px 12px',
                                backgroundColor: '#40444b',
                                border: '1px solid #40444b',
                                borderRadius: '3px',
                                color: '#dcddde',
                                fontSize: '14px',
                                outline: 'none'
                            },
                            onFocus: (e) => {
                                e.target.style.borderColor = '#7289da';
                            },
                            onBlur: (e) => {
                                e.target.style.borderColor = '#40444b';
                            }
                        })
                    ),
                    React.createElement('div', null,
                        React.createElement('label', { 
                            style: {
                                display: 'block',
                                color: '#b9bbbe',
                                fontSize: '14px',
                                fontWeight: 'bold',
                                marginBottom: '5px'
                            }
                        }, '–ü—Ä–∏—á–∏–Ω–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏—è'),
                        React.createElement('input', {
                            type: 'text',
                            placeholder: '–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–∞–∫–∞–∑–∞–Ω–∏—è',
                            style: {
                                width: '90%',
                                padding: '8px 12px',
                                backgroundColor: '#40444b',
                                border: '1px solid #40444b',
                                borderRadius: '3px',
                                color: '#dcddde',
                                fontSize: '14px',
                                outline: 'none'
                            },
                            onFocus: (e) => {
                                e.target.style.borderColor = '#7289da';
                            },
                            onBlur: (e) => {
                                e.target.style.borderColor = '#40444b';
                            }
                        })
                    ),
                );
            }

            onStart() {
                // const React = BdApi.React;
                
                // // –°–æ–∑–¥–∞–µ–º React —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                // const searchInputElement = React.createElement(this.MySearchInput, {
                //     placeholder: "–í—Ä–µ–º—è –º—É—Ç–∞",
                //     id: "time-punishment-input"
                // });

                // const searchInputElement1 = React.createElement(this.MySearchInput, {
                //     placeholder: "–ü—Ä–∏—á–∏–Ω–∞",
                //     id: "reason-punishment-input"
                // });

                // const main = React.createElement("div", { 
                //     class: "main-input-panel"
                // }, searchInputElement, React.createElement("br"), searchInputElement1);
                
                // const m = React.createElement(this.PunishmentForm);
                // const command = "vmute";

                // BdApi.UI.showConfirmationModal(
                //     `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–∫–∞–∑–∞–Ω–∏—è`,
                //     m,
                //     {
                //         confirmText: "–í—ã–¥–∞—Ç—å –º—É—Ç",
                //         cancelText: "",
                //         onConfirm: () => console.log(document.getElementById("time-punishment").value)
                //     }
                // );

                try {
                    this.MessageActions = BdApi.Webpack.getModule(m => m?.sendMessage && m?.receiveMessage);
                    this.ChannelStore = BdApi.Webpack.getModule(m => m?.getChannel && m?.getDMFromUserId);

                    if (!this.MessageActions) {
                        BdApi.UI.showToast("–û—à–∏–±–∫–∞: MessageActions –Ω–µ –Ω–∞–π–¥–µ–Ω", {type: "error"});
                        console.error("MessageActions module not found");
                    }

                    if (!this.ChannelStore) {
                        BdApi.UI.showToast("–û—à–∏–±–∫–∞: ChannelStore –Ω–µ –Ω–∞–π–¥–µ–Ω", {type: "error"});
                        console.error("ChannelStore module not found");
                    }

                    if (this.contextMenuPatch) {
                        this.contextMenuPatch();
                        this.contextMenuPatch = null;
                    }

                    this.contextMenuPatch = BdApi.ContextMenu.patch("user-context", (returnValue, props) => {
                        try {
                            const { user } = props;
                            if (!user) return;

                            const children = returnValue?.props?.children;
                            if (!Array.isArray(children)) return;

                            const exists = children.some(child =>
                                child?.props?.id === "khabarovsk-moderation-main"
                            );

                            if (exists) return;

                            const categoryItems = Object.keys(this.rules).map(categoryKey => {
                                const category = this.rules[categoryKey];
                                let options;
                                if (category.type == "punishment") {
                                    options = category.options.map((option, idx) => ({
                                        type: "item",
                                        label: option.name,
                                        id: `punishment-${1}-${idx}`,
                                        action: () => this.executePunishment(user, option.reason, option.command)
                                    }));
                                }
                                if (category.type == "notify") {
                                    options = category.options.map((option, idx) => ({
                                        type: "item",
                                        label: option.name,
                                        id: `notify-${1}-${idx}`,
                                        action: () => this.executeNotify(user, option.time, option.command)
                                    }));
                                }

                                if (category.type == "info") {
                                    options = category.options.map((option, idx) => ({
                                        type: "item",
                                        label: option.name,
                                        id: `info-${1}-${idx}`,
                                        action: () => this.executeInfo(user, option.command)
                                    }));
                                }

                                return {
                                    type: "submenu",
                                    label: category.name,
                                    id: `rule-${categoryKey}-${1}`,
                                    items: options
                                };
                            });

                            const moderationMenuItem = BdApi.ContextMenu.buildItem({
                                type: "submenu",
                                label: "–ú–æ–¥–µ—Ä–∞—Ü–∏—è",
                                id: "khabarovsk-moderation-main",
                                items: categoryItems
                            });

                            children.push(moderationMenuItem);
                        } catch (error) {
                            console.error("MTools patch error:", error);
                        }
                    });

                    BdApi.UI.showToast("–ü–ª–∞–≥–∏–Ω MTools –∑–∞–ø—É—â–µ–Ω", {type: "info"});
                } catch (error) {
                    console.error("MTools start error:", error);
                    BdApi.UI.showToast(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}`, {type: "error"});
                }
            }

            onStop() {
                if (this.contextMenuPatch) {
                    this.contextMenuPatch();
                    this.contextMenuPatch = null;
                }
                BdApi.UI.showToast("–ü–ª–∞–≥–∏–Ω MTools –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", {type: "info"});
            }

            executePunishment(user, reason, punishment) {
                let commandContent;

                commandContent = "{command} {userId} {reason}"
                    .replace("{command}", punishment)
                    .replace("{userId}", user.id)
                    .replace("{reason}", reason)

                this.insertTextIntoChat(commandContent)
            }

            executeNotify(user, time, command) {
                if (!time) time = ""
                let messageContent = "{command} {userId} {time}"
                    .replace("{command}", command)
                    .replace("{userId}", user.id)
                    .replace("{time}", time)

                this.MessageActions.sendMessage("1224770921378746510", {
                    content: messageContent,
                    tts: false,
                    invalidEmojis: [],
                    validNonShortcutEmojis: []
                }, undefined, {});
                if (time == "") { BdApi.UI.showToast(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} —É–≤–µ–¥–æ–º–ª—ë–Ω –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–º–µ–Ω—É –ø—Ä–æ—Ñ–∏–ª—è`, {type: "info"}); }
                else { BdApi.UI.showToast(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} —É–≤–µ–¥–æ–º–ª—ë–Ω –æ —Å–º–µ–Ω–µ –ø—Ä–æ—Ñ–∏–ª—è. –í—Ä–µ–º—è –¥–ª—è —Å–º–µ–Ω—ã: ${time} –º–∏–Ω—É—Ç`, {type: "info"}) };
            }

            executeInfo(user, command) {
                let messageContent = "{command} {userId}"
                    .replace("{command}", command)
                    .replace("{userId}", user.id)

                this.MessageActions.sendMessage("607260179334955049", {
                    content: messageContent,
                    tts: false,
                    invalidEmojis: [],
                    validNonShortcutEmojis: []
                }, undefined, {});
                if (command == "*alist") { BdApi.UI.showToast(`–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user}`, {type: "info"}); }
                else { BdApi.UI.showToast(`–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∫–æ–Ω–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user}`, {type: "info"}) };
            }

            insertTextIntoChat(text) {
                try {
                    navigator.clipboard.writeText(text).then(() => {
                        BdApi.UI.showToast(`–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`, {type: "info", timeout: 5000});
                    }).catch(err => {
                        BdApi.UI.showToast(`–û—à–∏–±–∫–∞: ${error.message}`, {type: "error"});
                    })
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞:", error);
                    BdApi.UI.showToast(`–û—à–∏–±–∫–∞: ${error.message}`, {type: "error"});
                }
            }
        };
    })(global.ZeresPluginLibrary.buildPlugin(config));
})();
